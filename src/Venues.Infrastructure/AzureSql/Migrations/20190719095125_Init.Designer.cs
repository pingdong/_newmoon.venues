// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PingDong.Newmoon.Venues.Infrastructure;

namespace PingDong.Newmoon.Venues.Infrastructure.Migrations
{
    [DbContext(typeof(DefaultDbContext))]
    [Migration("20190719095125_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PingDong.CleanArchitect.Service.ClientRequest<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<DateTime>("Time");

                    b.HasKey("Id");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("PingDong.Newmoon.Venues.Core.Venue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("VenueName")
                        .HasMaxLength(200);

                    b.Property<Guid>("TenantId")
                        .HasColumnName("TenantId")
                        .HasColumnType("UniqueIdentifier");

                    b.Property<int>("_placeStateId")
                        .HasColumnName("StateId");

                    b.HasKey("Id");

                    b.HasIndex("Id", "TenantId");

                    b.ToTable("Venues","dbo");
                });

            modelBuilder.Entity("PingDong.Newmoon.Venues.Core.Venue", b =>
                {
                    b.OwnsOne("PingDong.Newmoon.Venues.Core.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("VenueId");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnName("AddressCity")
                                .HasMaxLength(40);

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnName("AddressCountry")
                                .HasMaxLength(40);

                            b1.Property<string>("No")
                                .IsRequired()
                                .HasColumnName("AddressNo")
                                .HasMaxLength(20);

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnName("AddressState")
                                .HasMaxLength(40);

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnName("AddressStreet")
                                .HasMaxLength(100);

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasColumnName("AddressZipCode")
                                .HasMaxLength(10);

                            b1.HasKey("VenueId");

                            b1.ToTable("Venues","dbo");

                            b1.HasOne("PingDong.Newmoon.Venues.Core.Venue")
                                .WithOne("Address")
                                .HasForeignKey("PingDong.Newmoon.Venues.Core.Address", "VenueId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
