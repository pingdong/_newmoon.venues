parameters:
- name: appName
  type: string
  default: ''

variables:
- name  : appName
  value : ${{ lower(parameters.appName) }}

jobs:
- job: UnitTesting
  displayName: Unit Testing
  pool:
    vmImage: $(pipeline#pool)
  workspace:
    clean: all
  variables:
  - group : Pipeline
  - group : Build
  - group : Test.Unit
  - name  : local#codecoveragehistory.directory
    value : '$(Build.ArtifactStagingDirectory)/history'
  - name  : local#codecoveragehistory.directory
    value : $(variables.appName).$(Build.SourceBranchName)
  - name  : 'disable.coverage.autogenerate'
    value : 'true'
  steps:
  # Preparing
  - task: UniversalPackages@0
    displayName: Getting Test Coverage History
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
    continueOnError: true
    inputs:
      command: download
      downloadDirectory: $(local#codecoveragehistory.directory)
      feedsToUse: internal
      vstsFeed: $(test.unit#coverage.history.feed)
      vstsFeedPackage: $(local#codecoveragehistory.directory)
      vstsPackageVersion: '0.*'

  - task: SonarCloudPrepare@1
    displayName: Preparing SonarCloud Code Analysis
    inputs:
      SonarCloud: SonarCloud
      organization: $(test.unit#sonarcloud.organization)
      projectKey: $(variables.appName)
      projectName: $(variables.appName)
      extraProperties: |
        sonar.coverage.exclusions=**/*[Uu]nit[Tt]ests*/**/*
        sonar.cs.opencover.reportsPaths=$(Build.SourcesDirectory)/**/coverage.opencover.xml

  # Building
  - task: DotNetCoreCLI@2
    displayName: 'Building with Configuration: $(build#configuration.release)'
    inputs:
      projects: '**/*.sln'    # The <ProjectGuid> element is not required if you build a solution (sln) containing that project.
                              # for SonarQube
      arguments: '--configuration $(build#configuration.release)'

  # Testing
  - task: DotNetCoreCLI@2
    displayName: Running Unit Testings
    inputs:
      command: test
      arguments: '--no-build --configuration $(build#configuration.release) /p:CollectCoverage=true /p:CoverletOutputFormat=opencover'
      publishTestResults: true
      projects: '**/*.[Uu]nit[Tt]ests/*.csproj'

  # Generating Coverage Report
  - task: Palmmedia.reportgenerator.reportgenerator-build-release-task.reportgenerator@4
    displayName: Generating Test Coverage Report
    condition: ne(variables['Build.Reason'], 'PullRequest')
    inputs:
      reports: '$(Build.SourcesDirectory)/**/coverage.opencover.xml'
      targetdir: $(Build.SourcesDirectory)/Coverage
      reporttypes: Html;HtmlInline_AzurePipelines_Dark;Cobertura;Badges
      historydir: $(local#codecoveragehistory.directory)

  - task: UniversalPackages@0
    displayName: Saving Test Coverage History
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
    inputs:
      command: publish
      publishDirectory: $(local#codecoveragehistory.directory)
      feedsToUsePublish: internal
      vstsFeedPublish: $(test.unit#coverage.history.feed)
      vstsFeedPackagePublish: $(local#codecoveragehistory.directory)
      versionOption: patch
      packagePublishDescription: Code Coverage History for repository $(Build.Repository.Name) on branch $(Build.SourceBranchName)
      verbosity: Information

  - task: PublishCodeCoverageResults@1
    displayName: Publishing Test Coverage Report
    condition: ne(variables['Build.Reason'], 'PullRequest')
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: $(Build.SourcesDirectory)/Coverage/Cobertura.xml
      reportDirectory: $(Build.SourcesDirectory)/Coverage

  - task: SonarCloudAnalyze@1
    displayName: Running SonarCloud Code Analysis

  - task: SonarCloudPublish@1
    displayName: Publishing SonarCloud Analysis Result
