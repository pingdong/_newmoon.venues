resources:
  repositories:
  - repository: templates
    type: github
    name: pingdong/azure.devops.templates
    ref: refs/heads/master
    endpoint: GitHub  
  - repository: infrastructure
    type: github
    name: pingdong/newmoon.infrastructure
    ref: refs/heads/master
    endpoint: GitHub

variables:
- name  : local#service.name
  value : newmoon
- name  : local#project.name
  value : Newmoon.Venues
- name  : local#vs.project.name
  value : Venues.FunctionApp
- name  : local#environment.dev
  value : dev
- name  : local#environment.prod
  value : prod
# Existing issue:
# A few value in deployment task, such as Pool:vmImage, environment, azureSubscription, 
#   are only read from stage-level variables or variable groups
#   https://github.com/microsoft/azure-pipelines-extensions/issues/832
# The ultimate reason:
#   Azure DevOps need to check all permissions 
#   at the beginning of the run of the pipeline
- group : Pipeline

trigger:
  batch: false  # batch changes if true; 
                #   start a new build for every push if false (default)

pr:
  autoCancel: true   # Indicates whether additional pushes to a PR 
                     #   should cancel in-progress runs for the same PR.
                     # Defaults to true

schedules:
- cron: '0 1 * * *' # Every day at 1 A.M.
  displayName: Nightly Build
  branches:
    include:
    - master
  always: true      # Whether to always run the pipeline or only if 
                    #   there have been source code changes 
                    #   since the last successful scheduled run. 
                    # The default is false.

stages:
# Quality Control
- stage: QualityControl
  displayName: Quality Control
  variables:
    - group: Build
    - group: Test.Unit
    - group: Test.Integration
  jobs:
  # Unit Testing
  - template: templates\test.unit.yml@templates
    parameters:
      vmImage: $(pipeline#vmImage)
      buildConfiguration: $(test.unit#build.configuration)
      projectName: ${{ variables['local#vs.project.name'] }}   # Can't use $(local@app.name) here
                                                            #  as parameter appName is used to build variable in compile time inside template.
      sonarCloudProjectKey: $(local#project.name)
      coverageHistoryFeed: $(test.unit#coverage.history.feed)
      sonarcloudOrganization: $(test.unit#sonarcloud.organization)
     
  # Integration Testing
  - job: IntegrationTesting
    displayName: Integration Testing
    pool:      
      vmImage: $(pipeline#vmImage)
    variables:
    - group: Build
    - group: Test.Integration
    - name : local#terraform.variables
      value: '-var service=$(local#service.name) -var environment=$(test.integration#environment.name) -var location=$(pipeline#azure.location) -var target=integration_test -var integration_testing-features=["\"venue\""]'
    workspace:
      clean: all
    condition: |
      or
      (
        eq(variables['Build.SourceBranch'], 'refs/heads/master'),
        eq(variables['Build.Reason'], 'PullRequest'),
        eq(variables['Build.Reason'], 'Schedule')
      )
    steps:
    - checkout: self
    - checkout: infrastructure

    # Provisioning Testing Resources
    #   Terraform currently doesn't support multiple backend
    - pwsh: (Get-Content $(Build.SourcesDirectory)/newmoon.infrastructure/terraform/backend.tf) -replace 'backend "azurerm" {', 'backend "local" {' | Out-File -encoding ASCII $(Build.SourcesDirectory)/newmoon.infrastructure/terraform/backend.tf
      displayName: Change backend type
    - template: templates\terraform.apply.yml@templates
      parameters:
        azureSubscription: $(pipeline#azure.subscription)
        workingDirectory: $(Build.SourcesDirectory)/newmoon.infrastructure/terraform
        variables: $(local#terraform.variables)

    # Building Resourse
    - template: templates\build.yml@templates
      parameters:
        projectName: $(local#vs.project.name)
        buildConfiguration: $(build#configuration.release)
        continueOnError: true
        artifact: integration_test

    # Deploying Resource
    - template: templates\deploy.functionapp.yml@templates
      parameters:
        azureSubscription: $(pipeline#azure.subscription)
        funcName: $(TF_OUT_FUNC-VENUE-NAME)
        continueOnError: true
        artifact: integration_test

    # Running Integration Testings
    - task: DotNetCoreCLI@2
      displayName: Running Integration Testings
      continueOnError: true
      inputs:
        command: test
        arguments: '--configuration $(test.integration#build.configuration)'
        publishTestResults: true
        projects: '**/*.[Ii]ntegration[Tt]ests.csproj'
      env:
        FuncApp__BaseUrl: $(TF_OUT_FUNC-VENUE-BASEURL)

    # Tearing down Integration Testings Resources
    - template: templates\terraform.destroy.yml@templates
      parameters:
        azureSubscription: $(pipeline#azure.subscription)
        workingDirectory: $(Build.SourcesDirectory)/newmoon.infrastructure/terraform
        variables: $(local#terraform.variables)
    
  # Security Validating
  - template: templates\security.validation.yml@templates
    parameters:
      vmImage: $(pipeline#vmImage)

  # Infrastructure Validating
  - job: InfrastructureValidating
    displayName: Validating Infrastructure
    pool:
      vmImage: $(pipeline#vmImage)
    workspace:
      clean: all
    steps:
    - checkout: infrastructure

    - template: templates\terraform.validate.yml@templates
      parameters:
        workingDirectory: $(Build.SourcesDirectory)/terraform

# Build
- stage: Build
  displayName: Building
  dependsOn: QualityControl
  condition: |
    and
    (
      succeeded(),
      eq(variables['Build.SourceBranch'], 'refs/heads/master'),
      ne(variables['Build.Reason'], 'Schedule')
    )
  variables:
  - group: Build
  # Unable to have both variables and steps in one template
  - template: templates\build.vars.yml@templates
  jobs:
  - job: Build
    displayName: Building
    pool:
      vmImage: $(pipeline#vmImage)
    workspace:
      clean: all
    steps:
    - template: templates\build.yml@templates
      parameters:
        projectName: $(local#vs.project.name)
        buildConfiguration: $(build#configuration.release)
        forRelease: true

# Deployment
#   DEV
- stage: VerifyDev
  displayName: 'Verify: DEV'
  dependsOn: Build
  variables:
  - group: Pipeline.Terraform
  - group: Pipeline.Terraform.Secret
  jobs:
  - job: TerraformPlanning
    displayName: Verifying Infrastructure
    pool:
      vmImage: $(pipeline#vmImage)
    workspace:
      clean: all
    steps:
    - checkout: infrastructure
  
    - template: templates\terraform.plan.yml@templates
      parameters:
        azureSubscription: $(pipeline#azure.subscription)
        stateResourceGroup: $(pipeline.terraform#resourceGroup)
        stateStorageAccount: $(pipeline.terraform#storageAccount)
        stateStorageAccountContainer: $(pipeline.terraform#storageAccount.container.dev)
        stateStorageAccountKey: $(StateStorageKey)  # <- from Pipeline.Terraform.Secret
        workingDirectory: $(Build.SourcesDirectory)/terraform
        variables: '-var service=$(local#service.name) -var environment=$(local#environment.dev) -var location=$(pipeline#azure.location)'

- stage: DeployToDev
  displayName: 'Deploying: DEV'
  dependsOn: VerifyDev
  variables:
  - group: Pipeline.Terraform
  - group: Pipeline.Terraform.Secret
  jobs:
  - deployment: Deploying
    displayName: Deploying
    environment: $(pipeline#environment.deploy.dev)
    pool:
      vmImage: $(pipeline#vmImage)
    strategy:
      runOnce:
        deploy:
          steps:
          # Deploy Infrastructure Change
          - checkout: infrastructure

          - template: templates\terraform.apply.yml@templates
            parameters:
              azureSubscription: $(pipeline#azure.subscription)
              stateResourceGroup: $(pipeline.terraform#resourceGroup)
              stateStorageAccount: $(pipeline.terraform#storageAccount)
              stateStorageAccountContainer: $(pipeline.terraform#storageAccount.container.dev)
              stateStorageAccountKey: $(StateStorageKey) # <- from Pipeline.Terraform.Secret
              workingDirectory: $(Build.SourcesDirectory)/terraform
              variables: '-var service=$(local#service.name) -var environment=$(local#environment.dev) -var location=$(pipeline#azure.location)'
              
          # Deploy Func
          - template: templates\deploy.functionapp.yml@templates
            parameters:
              azureSubscription: $(pipeline#azure.subscription)
              funcName: $(TF_OUT_FUNC-VENUE-NAME)

#   PROD
- stage: VerifyProd
  displayName: 'Verifying: PROD'
  dependsOn: DeployToDev
  variables:
  - group: Pipeline.Terraform
  - group: Pipeline.Terraform.Secret
  jobs:
  - job: TerraformPlanning
    displayName: Verifying Infrastructure
    pool:
      vmImage: $(pipeline#vmImage)
    workspace:
      clean: all
    steps:
    - checkout: infrastructure
  
    - template: templates\terraform.plan.yml@templates
      parameters:
        azureSubscription: $(pipeline#azure.subscription)
        stateResourceGroup: $(pipeline.terraform#resourceGroup)
        stateStorageAccount: $(pipeline.terraform#storageAccount)
        stateStorageAccountContainer: $(pipeline.terraform#storageAccount.container.prod)
        stateStorageAccountKey: $(StateStorageKey)  # <- from Pipeline.Terraform.Secret
        workingDirectory: $(Build.SourcesDirectory)/terraform
        variables: '-var service=$(local#service.name) -var environment=$(local#environment.prod) -var location=$(pipeline#azure.location)'

- stage: DeployToProd
  displayName: 'Deploying: PROD'
  dependsOn: VerifyProd
  variables:
  - group: Pipeline.Terraform
  - group: Pipeline.Terraform.Secret
  jobs:
  - deployment: Deploying
    displayName: Deploying
    environment: $(pipeline#environment.deploy.prod)
    pool:
      vmImage: $(pipeline#vmImage)
    strategy:
      runOnce:
        deploy:
          steps:
          # Deploy Infrastructure Change
          - checkout: infrastructure

          - template: templates\terraform.apply.yml@templates
            parameters:
              azureSubscription: $(pipeline#azure.subscription)
              stateResourceGroup: $(pipeline.terraform#resourceGroup)
              stateStorageAccount: $(pipeline.terraform#storageAccount)
              stateStorageAccountContainer: $(pipeline.terraform#storageAccount.container.prod)
              stateStorageAccountKey: $(StateStorageKey) # <- from Pipeline.Terraform.Secret
              workingDirectory: $(Build.SourcesDirectory)/terraform
              variables: '-var service=$(local#service.name) -var environment=$(local#environment.prod) -var location=$(pipeline#azure.location)'
              
          # Deploy Func
          - template: templates\deploy.functionapp.yml@templates
            parameters:
              azureSubscription: $(pipeline#azure.subscription)
              funcName: $(TF_OUT_FUNC-VENUE-NAME)
              # Slot
              enableSlot: true
              resourceGroupName: $(TF_OUT_RG-COMPUTE_NAME)
              slotName: $(TF_OUT_FUNC-VENUE-SLOT_NAME)
