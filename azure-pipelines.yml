resources:
  repositories:
  - repository: templates
    type: github
    name: pingdong/azure.devops.templates
    ref: refs/heads/master
    endpoint: GitHub  
  - repository: infrastructure
    type: github
    name: pingdong/newmoon.infrastructure
    ref: refs/heads/master
    endpoint: GitHub

variables:
- name  : local#app.name
  value : Venues.FunctionApp
# Existing issue:
# A few value in deployment task, such as Pool:vmImage, environment, azureSubscription, 
#   are only read from stage-level variables or variable groups
#   https://github.com/microsoft/azure-pipelines-extensions/issues/832
# The ultimate reason:
#   Azure DevOps need to check all permissions 
#   at the beginning of the run of the pipeline
- group : Pipeline

trigger:
  batch: false  # batch changes if true; 
                #   start a new build for every push if false (default)

pr:
  autoCancel: true   # Indicates whether additional pushes to a PR 
                     #   should cancel in-progress runs for the same PR.
                     # Defaults to true

schedules:
- cron: '0 1 * * *' # Every day at 1 A.M.
  displayName: Nightly Build
  branches:
    include:
    - master
  always: true      # Whether to always run the pipeline or only if 
                    #   there have been source code changes 
                    #   since the last successful scheduled run. 
                    # The default is false.

stages:
# Quality Control
- stage: QualityControl
  displayName: Quality Control
  jobs:
  # Static Testing
  - template: templates\test.static.yml@templates
    variables:
    - group: Test.Static
    parameters:
      poolImage: $(pipeline#vmImage)

  # Unit Testing
  - template: templates\test.unit.yml@templates
    variables:
    - group: Test.Unit
    parameters:
      poolImage: $(pipeline#vmImage)
      buildConfiguration: $(build#configuration.release)
      appName: ${{ variables['local#app.name'] }}  # Can't use $(local@app.name) here
      coverageHistoryFeed: $(test.unit#coverage.history.feed)
      sonarcloudOrganization: $(test.unit#sonarcloud.organization)
     
  # Integration Testing
  - template: templates\test.integration.yml@templates
    variables:
    - group: Test.Integration
    parameters:
      poolImage: $(pipeline#vmImage)

# Build
- stage: Build
  displayName: Building
  dependsOn: QualityControl
  condition: |
    and
    (
      succeeded(),
      eq(variables['Build.SourceBranch'], 'refs/heads/master'),
      ne(variables['Build.Reason'], 'Schedule')
    )
  variables:
  - group: Build
  jobs:
  - template: templates\build.yml@templates
    parameters:
      poolImage: $(pipeline#vmImage)
      appName: $(local#app.name)
      buildConfiguration: $(build#configuration.release)
  
# Deployment
#   DEV
- stage: InfrastructurePlanDev
  displayName: 'Infrastructure Planning: DEV'
  dependsOn: Build
  variables:
  - group: Dev.Infrastructure
  - group: Dev.Infrastructure.Secret
  jobs:
  - template: templates\terraform.plan.yml@templates
    parameters:
      poolImage: $(pipeline#vmImage)
      workingDirectory: infrastructure\terraform@infrastructure
      commandOptions: # parameter
      azureSubscription: $(pipeline#azure.subscription.dev)
      terraformVersion: $(deploy#terraform.version)
      stateResourceGroup: $(infrastructure#state.resourceGroup)
      stateStorageAccount: $(infrastructure#state.storageAccount)
      stateStorageAccountContainer: $(infrastructure#state.storageAccount.container)
      stateStorageAccountKey: $(infrastructure.secret#state.storageAccount.key)

- stage: InfrastructureApplyDev
  displayName: 'Infrastructure Applying: DEV'
  dependsOn: InfrastructurePlanDev
  variables:
  - group: Dev.Infrastructure
  - group: Dev.Infrastructure.Secret
  jobs:
  - template: templates\terraform.apply.yml@templates
    parameters:
      environment: $(pipeline#environment.dev.infrastructure)
      poolImage: $(pipeline#vmImage)
      workingDirectory: infrastructure\terraform@infrastructure
      commandOptions: # parameter
      azureSubscription: $(pipeline#azure.subscription.dev)
      terraformVersion: $(deploy#terraform.version)
      stateResourceGroup: $(infrastructure#state.resourceGroup)
      stateStorageAccount: $(infrastructure#state.storageAccount)
      stateStorageAccountContainer: $(infrastructure#state.storageAccount.container)
      stateStorageAccountKey: $(infrastructure.secret#state.storageAccount.key)

- stage: DeployToDev
  displayName: 'Deploying: DEV'
  dependsOn: InfrastructureApplyDev
  jobs:
  - template: templates\deploy.functionapp.yml@templates
    parameters:
      poolImage: $(pipeline#vmImage)
      environment: $(pipeline#environment.deploy.dev)
      azureSubscription: $(pipeline#azure.subscription.dev)
      funcName: func-newmoon  # Should come from terraform output

#   PROD
- stage: DeployToProd
  displayName: 'Deploying: PROD'
  dependsOn: DeployToDev
  jobs:
  - template: templates\deploy.functionapp.yml@templates
    parameters:
      poolImage: $(pipeline#vmImage)
      environment: $(pipeline#environment.deploy.prod)
      azureSubscription: $(pipeline#azure.subscription.prod)
      funcName: func-newmoon-prod   # Should come from terraform output
      # Slot
      enableSlot: true
      resourceGroupName: rg-newmoon-prod    # Should come from terraform output
      slotName: stage     # Should come from terraform output
      