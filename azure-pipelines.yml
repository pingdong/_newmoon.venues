resources:
  repositories:
  - repository: templates
    type: github
    name: pingdong/azure.devops.templates
    ref: refs/heads/master
    endpoint: GitHub

variables:
- name: local#app.name
  value: Venues.FunctionApp

trigger:
  batch: true

pr:
  autoCancel: true   # Cancel previous build if check in multiple times

schedules:
- cron: '0 1 * * *' # Every day at 1 A.M.
  displayName: Nightly Build
  branches:
    include:
    - master
  always: true      # Even no code change

stages:
# Quality Control
- stage: QualityControl
  displayName: Quality Control
  jobs:
  - template: templates\test_static.yml@templates

  - template: templates\test_unit.yml@templates
    parameters:
      appName: ${{ variables['local#app.name'] }}  # Can't use $(local@app.name) here
     
  - template: templates\test_integration.yml@templates

# Build
- stage: Build
  displayName: Building
  dependsOn: QualityControl
  condition: |
    and
    (
      succeeded(),
      eq(variables['Build.SourceBranch'], 'refs/heads/master'),
      ne(variables['Build.Reason'], 'Schedule')
    )
  jobs:
  - template: templates\build.yml@templates
    parameters:
      appName: ${{ variables['local#app.name'] }}
  
# Deployment
# - stage: DeployToDev
#   displayName: 'Deploying: DEV'
#   dependsOn: Build
#   jobs:
#   - deployment: Deploying
#     displayName: Deploying
#     environment: dev_deploy
#     pool:
#       vmImage: $(pipeline#vmImage)
#     variables:
#     - group : Pipeline
#     - group: Deploy.Dev
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           #- template: templates\deploy_functionapp.yml@templates
#           - template: deploy_functionapp.yml
#             parameters:
#               funcName: ${{ variables['deploy#venue.app'] }}

# Deployment
- stage: DeployToDev	
  displayName: 'Deploying: DEV'	
  dependsOn: Build
  variables:
  - group: Pipeline
  - group: Deploy.Dev
  jobs:
  - deployment: Deploying
    displayName: Deploying
    pool:
      vmImage: $(pipeline#vmImage)
    environment: dev_deploy	
    strategy:	
      runOnce:	
        deploy:	
          steps:	
          - download: current	
            displayName: Getting Artifact	
            artifact: drop	

          - task: AzureWebApp@1	
            displayName: Deploying $(deploy#venue.app)	
            inputs:	
              azureSubscription: Azure	
              appType: functionApp	
              appName: $(deploy#venue.app)	
              package: '$(Pipeline.Workspace)/drop/*.zip'

- stage: DeployToProd
  displayName: 'Deploying: PROD'
  dependsOn: DeployToDev
  variables:
  - group: Deploy.Prod
  jobs:
  - template: templates\deploy_functionapp.yml@templates
    parameters:
      environment: dev_prod
      funcName: ${{ variables['deploy#venue.app'] }}
      enableSlot: true
      resourceGroupName: ${{ variables['deploy#venue.resourcegroup'] }}
      slotName: ${{ variables['deploy#venue.app.slot'] }}
      